# HAProxy Load Balancer Configuration
# Face Authentication and De-duplication System

global
    log /dev/log local0
    log /dev/log local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # SSL/TLS configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    timeout connect 5000
    timeout client  120000
    timeout server  120000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Statistics page
frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE

# HTTP frontend (redirect to HTTPS)
frontend face_auth_http
    bind *:80
    mode http
    redirect scheme https code 301 if !{ ssl_fc }

# HTTPS frontend
frontend face_auth_https
    bind *:443 ssl crt /etc/haproxy/certs/face_auth.pem
    mode http
    
    # Security headers
    http-response set-header X-Frame-Options SAMEORIGIN
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    
    # Request ID
    unique-id-format %{+X}o\ %ci:%cp_%fi:%fp_%Ts_%rt:%pid
    unique-id-header X-Request-ID
    
    # Rate limiting (using stick tables)
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 100 }
    
    # ACLs for different paths
    acl is_health path /health
    acl is_live path /live
    acl is_ready path /ready
    acl is_batch path_beg /api/v1/applications/batch
    acl is_api path_beg /api/
    acl is_docs path_beg /docs /redoc /openapi.json
    
    # Use backend
    use_backend face_auth_backend

# Backend servers
backend face_auth_backend
    mode http
    balance leastconn
    
    # Health check configuration
    option httpchk GET /health
    http-check expect status 200
    
    # Server options
    option forwardfor
    option http-server-close
    http-reuse safe
    
    # Backend servers
    server worker1 10.0.1.10:8000 check inter 5s fall 3 rise 2 maxconn 100
    server worker2 10.0.1.11:8000 check inter 5s fall 3 rise 2 maxconn 100
    server worker3 10.0.1.12:8000 check inter 5s fall 3 rise 2 maxconn 100
    
    # Backup server (optional)
    # server backup 10.0.1.99:8000 check inter 10s backup

# Backend for health checks (no rate limiting)
backend health_check_backend
    mode http
    balance roundrobin
    
    option httpchk GET /health
    http-check expect status 200
    
    server worker1 10.0.1.10:8000 check
    server worker2 10.0.1.11:8000 check
    server worker3 10.0.1.12:8000 check
